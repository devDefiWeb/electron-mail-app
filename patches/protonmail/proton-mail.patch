diff --git a/packages/components/containers/login/MinimalLoginContainer.tsx b/packages/components/containers/login/MinimalLoginContainer.tsx
index 6fef05c..1719cc8 100644
--- a/packages/components/containers/login/MinimalLoginContainer.tsx
+++ b/packages/components/containers/login/MinimalLoginContainer.tsx
@@ -25,6 +25,8 @@ import AbuseModal from './AbuseModal';
 import { AuthActionResponse, AuthCacheResult, AuthStep } from './interface';
 import { handleLogin, handleTotp, handleUnlock } from './loginActions';

+const ELECTRON_MAIL_FORM_STYLE = { padding: '0.8rem' } as const;
+
 const UnlockForm = ({
     onSubmit,
     cancelButton,
@@ -43,6 +45,7 @@ const UnlockForm = ({
                 withLoading(onSubmit(keyPassword)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="password">{c('Label').t`Mailbox password`}</Label>
             <div className="mb1">
@@ -87,6 +90,7 @@ const TOTPForm = ({
                 withLoading(onSubmit(totp)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="twoFa">{c('Label').t`Two-factor authentication code`}</Label>
             <div className="mb1">
@@ -165,6 +169,7 @@ const LoginForm = ({
                     withLoading(run()).catch(noop);
                 }}
                 method="post"
+                style={ELECTRON_MAIL_FORM_STYLE}
             >
                 {hasChallenge && (
                     <Challenge

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index 3f222f7..98e9cfe 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -200,7 +200,7 @@ const MailboxContainer = ({
     );

     return (
-        <div ref={elementRef} tabIndex={-1} className="flex-item-fluid flex flex-column flex-nowrap no-outline">
+        <div ref={elementRef} tabIndex={-1} className="flex-item-fluid flex flex-column flex-nowrap no-outline electron-mail-mailbox-container-component">
             {showToolbar && (
                 <Toolbar
                     labelID={labelID}

diff --git a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
index 47b6e1e6f..989a1d771 100644
--- a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
+++ b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
@@ -172,7 +172,7 @@ const AdvancedSearchDropdown = ({ keyword: fullInput = '', isNarrow }: Props) =>
         loadingLabels || loadingFolders || loadingMailSettings || loadingESFeature || loadingScheduledFeature;

     // Switches
-    const showEncryptedSearch = !isMobile() && !!esFeature && !!esFeature.Value && !!isPaid(user);
+    const showEncryptedSearch = false;
     const showAdvancedSearch = !showEncryptedSearch || showMore;
     const dropdownSearchButtonProps = {
         ref: anchorRef,

diff --git a/applications/mail/src/app/containers/EncryptedSearchProvider.tsx b/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
index 444313146..4ed701c49 100644
--- a/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
+++ b/applications/mail/src/app/containers/EncryptedSearchProvider.tsx
@@ -717,125 +717,7 @@ const EncryptedSearchProvider = ({ children }: Props) => {
     /**
      * Execute an encrypted search
      */
-    const encryptedSearch: EncryptedSearch = async (labelID, setCache) => {
-        // Prevent old searches from interfering with newer ones
-        abortSearchingRef.current.abort();
-        setESStatus((esStatus) => {
-            return {
-                ...esStatus,
-                isSearching: false,
-                isSearchPartial: false,
-            };
-        });
-
-        const t1 = performance.now();
-        const {
-            dbExists,
-            esEnabled,
-            previousNormSearchParams,
-            permanentResults,
-            isSearchPartial: wasSearchPartial,
-            cachedIndexKey,
-            isCaching,
-            isFirstSearch,
-        } = esStatus;
-
-        if (!dbExists || !esEnabled) {
-            return false;
-        }
-
-        const isIDBIntact = await canUseES(userID);
-        if (!isIDBIntact) {
-            return dbCorruptError().then(() => false);
-        }
-
-        abortSearchingRef.current = new AbortController();
-
-        // Caching needs to be triggered here for when a refresh happens on a search URL
-        if (!isCaching && !esCacheRef.current.isCacheReady) {
-            void cacheIndexedDB();
-        }
-
-        const { searchParameters, filterParameter, sortParameter } = parseSearchParams(history.location);
-        const normalisedSearchParams = normaliseSearchParams(searchParameters, labelID, filterParameter, sortParameter);
-
-        // In case only sorting changed, for complete searches it doesn't make sense to perform a new search
-        if (!wasSearchPartial && previousNormSearchParams) {
-            const shouldSortOnly = shouldOnlySortResults(normalisedSearchParams, previousNormSearchParams);
-            if (shouldSortOnly) {
-                setCache(permanentResults, pageRef.current);
-                return true;
-            }
-        }
-
-        setESStatus((esStatus) => {
-            return {
-                ...esStatus,
-                isSearching: true,
-                isSearchPartial: true,
-                isFirstSearch: false,
-            };
-        });
-
-        const controlledSetCache = (Elements: Element[]) => {
-            if (!abortSearchingRef.current.signal.aborted) {
-                setCache(Elements, pageRef.current);
-            }
-        };
-
-        let searchResults: ESMessage[] = [];
-        let isSearchPartial = false;
-        let lastEmail: LastEmail | undefined;
-        try {
-            ({ searchResults, isSearchPartial, lastEmail } = await hybridSearch(
-                esCacheRef,
-                normalisedSearchParams,
-                cachedIndexKey,
-                getUserKeys,
-                userID,
-                controlledSetCache,
-                abortSearchingRef
-            ));
-        } catch (error: any) {
-            esSentryReport('encryptedSearch: hybridSearch', { error });
-            // If the key is the problem, then we want to wipe the DB and fall back to
-            // server-side search, otherwise we want to show a generic error and still
-            // fall back to server-side search
-            if (error.message === 'Key not found') {
-                return dbCorruptError().then(() => false);
-            }
-            throw error;
-        }
-
-        if (!abortSearchingRef.current.signal.aborted) {
-            setESStatus((esStatus) => {
-                return {
-                    ...esStatus,
-                    permanentResults: searchResults,
-                    labelID,
-                    setElementsCache: setCache,
-                    lastEmail,
-                    previousNormSearchParams: normalisedSearchParams,
-                    page: 0,
-                    isSearchPartial,
-                    isSearching: false,
-                };
-            });
-            setCache(searchResults, pageRef.current);
-
-            const t2 = performance.now();
-            void sendSearchingMetrics(
-                api,
-                userID,
-                esCacheRef.current.cacheSize,
-                Math.ceil(t2 - t1),
-                isFirstSearch,
-                esCacheRef.current.isCacheLimited
-            );
-        }
-
-        return true;
-    };
+    const encryptedSearch: EncryptedSearch = async (labelID, setCache) => false;

     /**
      * Increase the number of results in case the cache is limited as the user changes page

diff --git a/applications/mail/src/app/App.tsx b/applications/mail/src/app/App.tsx
index a4bc16d65..84140bc5b 100644
--- a/applications/mail/src/app/App.tsx
+++ b/applications/mail/src/app/App.tsx
@@ -10,7 +10,6 @@ import { initLocales } from '@proton/shared/lib/i18n/locales';

 import * as config from './config';
 import PrivateApp from './PrivateApp';
-import { MAILTO_PROTOCOL_HANDLER_PATH } from './constants';

 import './app.scss';

@@ -24,19 +23,6 @@ const enhancedConfig = {
 newVersionUpdater(enhancedConfig);
 sentry(enhancedConfig);

-if ('registerProtocolHandler' in navigator) {
-    try {
-        navigator.registerProtocolHandler(
-            'mailto',
-            `${window.location.origin}${MAILTO_PROTOCOL_HANDLER_PATH}`,
-            // @ts-expect-error third arg is still recommended (cf. https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler)
-            'ProtonMail'
-        );
-    } catch (e: any) {
-        console.error(e);
-    }
-}
-
 const App = () => {
     const [hasInitialAuth] = useState(() => {
         return !window.location.pathname.startsWith(G_OAUTH_REDIRECT_PATH);
