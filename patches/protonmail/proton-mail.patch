diff --git a/packages/components/containers/login/MinimalLoginContainer.tsx b/packages/components/containers/login/MinimalLoginContainer.tsx
index 6fef05c..1719cc8 100644
--- a/packages/components/containers/login/MinimalLoginContainer.tsx
+++ b/packages/components/containers/login/MinimalLoginContainer.tsx
@@ -25,6 +25,8 @@ import AbuseModal from './AbuseModal';
 import { AuthActionResponse, AuthCacheResult, AuthStep } from './interface';
 import { handleLogin, handleTotp, handleUnlock } from './loginActions';

+const ELECTRON_MAIL_FORM_STYLE = { padding: '0.8rem' } as const;
+
 const UnlockForm = ({
     onSubmit,
     cancelButton,
@@ -43,6 +45,7 @@ const UnlockForm = ({
                 withLoading(onSubmit(keyPassword)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="password">{c('Label').t`Mailbox password`}</Label>
             <div className="mb1">
@@ -87,6 +90,7 @@ const TOTPForm = ({
                 withLoading(onSubmit(totp)).catch(noop);
             }}
             method="post"
+            style={ELECTRON_MAIL_FORM_STYLE}
         >
             <Label htmlFor="twoFa">{c('Label').t`Two-factor authentication code`}</Label>
             <div className="mb1">
@@ -165,6 +169,7 @@ const LoginForm = ({
                     withLoading(run()).catch(noop);
                 }}
                 method="post"
+                style={ELECTRON_MAIL_FORM_STYLE}
             >
                 {hasChallenge && (
                     <Challenge

diff --git a/packages/encrypted-search/lib/esUtils.ts b/packages/encrypted-search/lib/esUtils.ts
index 565746063..24978868a 100644
--- a/packages/encrypted-search/lib/esUtils.ts
+++ b/packages/encrypted-search/lib/esUtils.ts
@@ -280,13 +280,7 @@ export const updateSizeIDB = (userID: string, addend: number) => {
  * but also because IDB is not corrupt, i.e. the object store exists
  */
 export const canUseES = async (userID: string, storeName: string) => {
-    if (!indexKeyExists(userID)) {
-        return false;
-    }
-    const esDB = await openESDB(userID);
-    const isIntact = esDB.objectStoreNames.contains(storeName);
-    esDB.close();
-    return isIntact;
+    return Promise.resolve(false);
 };

 /**

diff --git a/applications/mail/src/app/App.tsx b/applications/mail/src/app/App.tsx
index 3da997386..c629fde0d 100644
--- a/applications/mail/src/app/App.tsx
+++ b/applications/mail/src/app/App.tsx
@@ -13,7 +13,6 @@ import * as config from './config';
 import PrivateApp from './PrivateApp';

 import './app.scss';
-import { registerMailToProtocolHandler } from './helpers/url';

 const locales = initLocales(require.context('../../locales', true, /.json$/, 'lazy'));

@@ -26,11 +25,6 @@ newVersionUpdater(enhancedConfig);
 sentry(enhancedConfig);
 setVcalProdId(getProdId(enhancedConfig));

-// If the browser is Chromium based, register automatically the mailto protocol handler
-if ('chrome' in window) {
-    registerMailToProtocolHandler();
-}
-
 const App = () => {
     const [hasInitialAuth] = useState(() => {
         return !window.location.pathname.startsWith(G_OAUTH_REDIRECT_PATH);

diff --git a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
index 7da0f183e..c07f51d91 100644
--- a/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
+++ b/applications/mail/src/app/components/header/AdvancedSearchDropdown.tsx
@@ -200,7 +200,7 @@ const AdvancedSearchDropdown = ({ keyword: fullInput = '', isNarrow }: Props) =>
         loadingScheduledFeature;

     // Switches
-    const showEncryptedSearch = !isMobile() && !!esFeature && !!esFeature.Value && !!isPaid(user);
+    const showEncryptedSearch = false;
     const showAdvancedSearch = !showEncryptedSearch || showMore;
     const dropdownSearchButtonProps = {
         ref: anchorRef,

diff --git a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
index 562696c4e..6531defba 100644
--- a/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
+++ b/applications/mail/src/app/containers/mailbox/MailboxContainer.tsx
@@ -247,6 +247,7 @@ const MailboxContainer = ({
                 tabIndex={-1}
                 className="flex-item-fluid flex flex-column flex-nowrap outline-none"
                 data-testid="mailbox"
+                electron-mail-mailbox-container-component
             >
                 {showToolbar && (
                     <ErrorBoundary small>

diff --git a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
index c7d094d1b..3667af1eb 100644
--- a/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
+++ b/applications/mail/src/app/helpers/attachment/attachmentLoader.ts
@@ -48,6 +48,7 @@ export const getRequest = ({ ID = '' }: Attachment = {}, api: Api, messageKeys:
     return api(getAttachment(ID));
 };

+/* electron-mail mark */
 export const getDecryptedAttachment = async (
     attachment: Attachment,
     verification: MessageVerification | undefined,
@@ -82,6 +83,7 @@ export const getDecryptedAttachment = async (
         throw newError;
     }
 };
+/* electron-mail mark */

 export const getAndVerify = async (
     attachment: Attachment = {},

diff --git a/applications/mail/src/app/helpers/message/messageDecrypt.ts b/applications/mail/src/app/helpers/message/messageDecrypt.ts
index 375be1b51..a6bd8390e 100644
--- a/applications/mail/src/app/helpers/message/messageDecrypt.ts
+++ b/applications/mail/src/app/helpers/message/messageDecrypt.ts
@@ -47,6 +47,7 @@ const binaryToString = (data: Uint8Array) =>
         // nbsp can be contained in message body and "crash" DOMPurify
         .replace(/\u00A0/g, ' ');

+/* electron-mail mark */
 export interface DecryptMessageResult {
     decryptedBody: string;
     decryptedRawContent: Uint8Array;
@@ -56,6 +57,7 @@ export interface DecryptMessageResult {
     errors?: MessageErrors;
     mimetype?: MIME_TYPES;
 }
+/* electron-mail mark */

 const decryptMimeMessage = async (
     message: Message,
@@ -164,6 +166,7 @@ const decryptLegacyMessage = async (
  * Willingly not dealing with public keys and signature verification
  * It will be done separately when public keys will be ready
  */
+/* electron-mail mark */
 export const decryptMessage = async (
     message: Message,
     privateKeys: OpenPGPKey[],
@@ -176,6 +179,7 @@ export const decryptMessage = async (
     }
     return decryptLegacyMessage(message, privateKeys, password);
 };
+/* electron-mail mark */

 /**
  * Verify the extracted `signature` of a decryption result against its `decryptedRawContent`

diff --git a/applications/mail/src/app/logic/messages/messagesTypes.ts b/applications/mail/src/app/logic/messages/messagesTypes.ts
index 91dcf4e63..aa1a6a1cf 100644
--- a/applications/mail/src/app/logic/messages/messagesTypes.ts
+++ b/applications/mail/src/app/logic/messages/messagesTypes.ts
@@ -44,6 +44,8 @@ export interface MessageVerification {
      */
     verificationErrors: Error[] | undefined;

+    /* electron-mail mark */
+
     /**
      * Pinned public keys of the sender, if any
      */
@@ -54,6 +56,8 @@ export interface MessageVerification {
      */
     senderVerified: boolean | undefined;

+    /* electron-mail mark */
+
     /**
      * If the message is signed, the public key that verifies the signature
      */

diff --git a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
index 4c16c85b5..8b93c6084 100644
--- a/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
+++ b/applications/mail/src/app/hooks/message/useGetMessageKeys.ts
@@ -10,7 +10,7 @@ export type UseGetMessageKeys = () => GetMessageKeys;
 /**
  * Add user public and private keys to the MessageExtended if not already there
  */
-export const useGetMessageKeys: UseGetMessageKeys = () => {
+export const useGetMessageKeys: UseGetMessageKeys = () => { /* electron-mail mark */
     const getAddressKeys = useGetAddressKeys();

     return useCallback(
@@ -20,4 +20,4 @@ export const useGetMessageKeys: UseGetMessageKeys = () => {
         },
         [getAddressKeys]
     );
-};
+}; /* electron-mail mark */

diff --git a/packages/components/hooks/useGetEncryptionPreferences.ts b/packages/components/hooks/useGetEncryptionPreferences.ts
index fe83b9e8c..b944a61e8 100644
--- a/packages/components/hooks/useGetEncryptionPreferences.ts
+++ b/packages/components/hooks/useGetEncryptionPreferences.ts
@@ -24,7 +24,7 @@ const DEFAULT_LIFETIME = 5 * MINUTE;
  * The logic for how those preferences are determined is laid out in the
  * Confluence document 'Encryption preferences for outgoing email'
  */
-const useGetEncryptionPreferences = () => {
+const useGetEncryptionPreferences = () => { /* electron-mail mark */
     const api = useApi();
     const cache = useCache();
     const getAddresses = useGetAddresses();
@@ -87,6 +87,6 @@ const useGetEncryptionPreferences = () => {
         },
         [cache, getEncryptionPreferences]
     );
-};
+}; /* electron-mail mark */

 export default useGetEncryptionPreferences;

diff --git a/packages/components/hooks/useApi.ts b/packages/components/hooks/useApi.ts
index e2baface5..8b4317d5a 100644
--- a/packages/components/hooks/useApi.ts
+++ b/packages/components/hooks/useApi.ts
@@ -3,8 +3,8 @@ import { Api } from '@proton/shared/lib/interfaces';

 import ContextApi from '../containers/api/apiContext';

-const useApi = (): Api => {
+const useApi = (): Api => { /* electron-mail mark */
     return useContext(ContextApi);
-};
+}; /* electron-mail mark */

 export default useApi;

diff --git a/packages/components/hooks/useAuthentication.ts b/packages/components/hooks/useAuthentication.ts
index feb92a8af..d802ae8ae 100644
--- a/packages/components/hooks/useAuthentication.ts
+++ b/packages/components/hooks/useAuthentication.ts
@@ -3,9 +3,9 @@ import { useContext } from 'react';
 import AuthenticationContext from '../containers/authentication/authenticationContext';
 import { PrivateAuthenticationStore } from '../containers/app/interface';

-const useAuthentication = () => {
+const useAuthentication = () => { /* electron-mail mark */
     // Force private authentication store because the public app is a special case
     return useContext(AuthenticationContext) as PrivateAuthenticationStore;
-};
+}; /* electron-mail mark */

 export default useAuthentication;

diff --git a/packages/components/hooks/useCache.ts b/packages/components/hooks/useCache.ts
index 35d7a0aba..352f1c8a3 100644
--- a/packages/components/hooks/useCache.ts
+++ b/packages/components/hooks/useCache.ts
@@ -3,7 +3,7 @@ import { useContext } from 'react';

 import Context from '../containers/cache/cacheContext';

-const useCache = <K = string, V = any>() => {
+const useCache = <K = string, V = any>() => { /* electron-mail mark */
     const cache = useContext(Context);

     if (!cache) {
@@ -11,6 +11,6 @@ const useCache = <K = string, V = any>() => {
     }

     return cache as Cache<K, V>;
-};
+}; /* electron-mail mark */

 export default useCache;
