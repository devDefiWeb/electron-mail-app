diff --git a/packages/components/containers/app/ProtonApp.tsx b/packages/components/containers/app/ProtonApp.tsx
index fd4084640..a8104025f 100644
--- a/packages/components/containers/app/ProtonApp.tsx
+++ b/packages/components/containers/app/ProtonApp.tsx
@@ -103,7 +103,9 @@ interface Props {
 }

 const ProtonApp = ({ config, children, hasInitialAuth }: Props) => {
+    /* electron-mail mark */
     const authentication = useInstance(() => createAuthentication(createSecureSessionStorage()));
+    /* electron-mail mark */
     const pathRef = useRef<string | undefined>();
     const cacheRef = useRef<Cache<string, any>>();
     if (!cacheRef.current) {

diff --git a/packages/shared/lib/authentication/createSecureSessionStorage.ts b/packages/shared/lib/authentication/createSecureSessionStorage.ts
index 9e47ba48b..66ff855a4 100644
--- a/packages/shared/lib/authentication/createSecureSessionStorage.ts
+++ b/packages/shared/lib/authentication/createSecureSessionStorage.ts
@@ -1,6 +1,7 @@
 import createStore from '../helpers/store';
 import { save, load } from '../helpers/secureSessionStorage';

+/* electron-mail mark */
 const createSecureSessionStorage = () => {
     const store = createStore(load());

@@ -30,3 +31,4 @@ const createSecureSessionStorage = () => {
 export type SecureSessionStorage = ReturnType<typeof createSecureSessionStorage>;

 export default createSecureSessionStorage;
+/* electron-mail mark */

diff --git a/packages/shared/lib/helpers/secureSessionStorage.ts b/packages/shared/lib/helpers/secureSessionStorage.ts
index 66c59123b..90915a2a6 100644
--- a/packages/shared/lib/helpers/secureSessionStorage.ts
+++ b/packages/shared/lib/helpers/secureSessionStorage.ts
@@ -3,6 +3,7 @@ import getRandomValues from '@proton/get-random-values';
 // Not using openpgp to allow using this without having to depend on openpgp being loaded
 import { uint8ArrayToString, stringToUint8Array } from './encoding';
 import { hasStorage as hasSessionStorage } from './sessionStorage';
+import { MAILBOX_PASSWORD_KEY, UID_KEY } from '../constants';

 /**
  * Partially inspired by http://www.thomasfrank.se/sessionvars.html
@@ -121,6 +122,7 @@ export const separateParts = (data: any) =>
         { share1: {}, share2: {} }
     );

+/* electron-mail mark */
 const SESSION_STORAGE_KEY = 'proton:storage';
 export const save = (data: any) => {
     if (!hasSessionStorage()) {
@@ -135,6 +137,30 @@ export const load = () => {
     if (!hasSessionStorage()) {
         return {};
     }
+    if ( // using old logic: https://github.com/ProtonMail/WebClients/commit/c0354e1522a5c499aacc0d43960473d8eb658793
+        !window.sessionStorage.getItem(SESSION_STORAGE_KEY)
+        &&
+        (
+            window.sessionStorage.getItem(MAILBOX_PASSWORD_KEY)
+            &&
+            window.sessionStorage.getItem(UID_KEY)
+        )
+    ) {
+        const readSessionStorage = (keys: string[] = []) => {
+            return keys.reduce<{ [key: string]: any }>((acc, key) => {
+                acc[key] = window.sessionStorage.getItem(key);
+                window.sessionStorage.removeItem(key);
+                return acc;
+            }, {});
+        };
+        const load = (keys: string[]) => {
+            const nameStorage = deserialize(window.name);
+            window.name = '';
+            const sessionData = readSessionStorage(keys);
+            return mergeParts(nameStorage, sessionData);
+        };
+        return load([MAILBOX_PASSWORD_KEY, UID_KEY]);
+    }
     try {
         const share1 = deserialize(window.name);
         const share2 = window.sessionStorage.getItem(SESSION_STORAGE_KEY) || '';
@@ -150,3 +176,4 @@ export const load = () => {
         return {};
     }
 };
+/* electron-mail mark */
